/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 105);
/******/ })
/************************************************************************/
/******/ ({

/***/ 105:
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(106);


/***/ }),

/***/ 106:
/***/ (function(module, exports) {

eval("// SmoothScroll for websites v1.2.1\n// Licensed under the terms of the MIT license.\n\n// People involved\n//  - Balazs Galambosi (maintainer)  \n//  - Michael Herf     (Pulse Algorithm)\n\n(function () {\n\n    // Scroll Variables (tweakable)\n    var defaultOptions = {\n\n        // Scrolling Core\n        frameRate: 150, // [Hz]\n        animationTime: 400, // [px]\n        stepSize: 120, // [px]\n\n        // Pulse (less tweakable)\n        // ratio of \"tail\" to \"acceleration\"\n        pulseAlgorithm: true,\n        pulseScale: 8,\n        pulseNormalize: 1,\n\n        // Acceleration\n        accelerationDelta: 20, // 20\n        accelerationMax: 1, // 1\n\n        // Keyboard Settings\n        keyboardSupport: true, // option\n        arrowScroll: 50, // [px]\n\n        // Other\n        touchpadSupport: true,\n        fixedBackground: true,\n        excluded: \"\"\n    };\n\n    var options = defaultOptions;\n\n    // Other Variables\n    var isExcluded = false;\n    var isFrame = false;\n    var direction = { x: 0, y: 0 };\n    var initDone = false;\n    var root = document.documentElement;\n    var activeElement;\n    var observer;\n    var deltaBuffer = [120, 120, 120];\n\n    var key = { left: 37, up: 38, right: 39, down: 40, spacebar: 32,\n        pageup: 33, pagedown: 34, end: 35, home: 36 };\n\n    /***********************************************\n     * SETTINGS\n     ***********************************************/\n\n    var options = defaultOptions;\n\n    /***********************************************\n     * INITIALIZE\n     ***********************************************/\n\n    /**\n     * Tests if smooth scrolling is allowed. Shuts down everything if not.\n     */\n    function initTest() {\n\n        var disableKeyboard = false;\n\n        // disable keyboard support if anything above requested it\n        if (disableKeyboard) {\n            removeEvent(\"keydown\", keydown);\n        }\n\n        if (options.keyboardSupport && !disableKeyboard) {\n            addEvent(\"keydown\", keydown);\n        }\n    }\n\n    /**\n     * Sets up scrolls array, determines if frames are involved.\n     */\n    function init() {\n\n        if (!document.body) return;\n\n        var body = document.body;\n        var html = document.documentElement;\n        var windowHeight = window.innerHeight;\n        var scrollHeight = body.scrollHeight;\n\n        // check compat mode for root element\n        root = document.compatMode.indexOf('CSS') >= 0 ? html : body;\n        activeElement = body;\n\n        initTest();\n        initDone = true;\n\n        // Checks if this script is running in a frame\n        if (top != self) {\n            isFrame = true;\n        }\n\n        /**\n         * This fixes a bug where the areas left and right to \n         * the content does not trigger the onmousewheel event\n         * on some pages. e.g.: html, body { height: 100% }\n         */\n        else if (scrollHeight > windowHeight && (body.offsetHeight <= windowHeight || html.offsetHeight <= windowHeight)) {\n\n                html.style.height = 'auto';\n                setTimeout(refresh, 10);\n\n                // clearfix\n                if (root.offsetHeight <= windowHeight) {\n                    var underlay = document.createElement(\"div\");\n                    underlay.style.clear = \"both\";\n                    body.appendChild(underlay);\n                }\n            }\n\n        // disable fixed background\n        if (!options.fixedBackground && !isExcluded) {\n            body.style.backgroundAttachment = \"scroll\";\n            html.style.backgroundAttachment = \"scroll\";\n        }\n    }\n\n    /************************************************\n     * SCROLLING \n     ************************************************/\n\n    var que = [];\n    var pending = false;\n    var lastScroll = +new Date();\n\n    /**\n     * Pushes scroll actions to the scrolling queue.\n     */\n    function scrollArray(elem, left, top, delay) {\n\n        delay || (delay = 1000);\n        directionCheck(left, top);\n\n        if (options.accelerationMax != 1) {\n            var now = +new Date();\n            var elapsed = now - lastScroll;\n            if (elapsed < options.accelerationDelta) {\n                var factor = (1 + 30 / elapsed) / 2;\n                if (factor > 1) {\n                    factor = Math.min(factor, options.accelerationMax);\n                    left *= factor;\n                    top *= factor;\n                }\n            }\n            lastScroll = +new Date();\n        }\n\n        // push a scroll command\n        que.push({\n            x: left,\n            y: top,\n            lastX: left < 0 ? 0.99 : -0.99,\n            lastY: top < 0 ? 0.99 : -0.99,\n            start: +new Date()\n        });\n\n        // don't act if there's a pending queue\n        if (pending) {\n            return;\n        }\n\n        var scrollWindow = elem === document.body;\n\n        var step = function step(time) {\n\n            var now = +new Date();\n            var scrollX = 0;\n            var scrollY = 0;\n\n            for (var i = 0; i < que.length; i++) {\n\n                var item = que[i];\n                var elapsed = now - item.start;\n                var finished = elapsed >= options.animationTime;\n\n                // scroll position: [0, 1]\n                var position = finished ? 1 : elapsed / options.animationTime;\n\n                // easing [optional]\n                if (options.pulseAlgorithm) {\n                    position = pulse(position);\n                }\n\n                // only need the difference\n                var x = item.x * position - item.lastX >> 0;\n                var y = item.y * position - item.lastY >> 0;\n\n                // add this to the total scrolling\n                scrollX += x;\n                scrollY += y;\n\n                // update last values\n                item.lastX += x;\n                item.lastY += y;\n\n                // delete and step back if it's over\n                if (finished) {\n                    que.splice(i, 1);i--;\n                }\n            }\n\n            // scroll left and top\n            if (scrollWindow) {\n                window.scrollBy(scrollX, scrollY);\n            } else {\n                if (scrollX) elem.scrollLeft += scrollX;\n                if (scrollY) elem.scrollTop += scrollY;\n            }\n\n            // clean up if there's nothing left to do\n            if (!left && !top) {\n                que = [];\n            }\n\n            if (que.length) {\n                requestFrame(step, elem, delay / options.frameRate + 1);\n            } else {\n                pending = false;\n            }\n        };\n\n        // start a new queue of actions\n        requestFrame(step, elem, 0);\n        pending = true;\n    }\n\n    /***********************************************\n     * EVENTS\n     ***********************************************/\n\n    /**\n     * Mouse wheel handler.\n     * @param {Object} event\n     */\n    function wheel(event) {\n\n        if (!initDone) {\n            init();\n        }\n\n        var target = event.target;\n        var overflowing = overflowingAncestor(target);\n\n        // use default if there's no overflowing\n        // element or default action is prevented    \n        if (!overflowing || event.defaultPrevented || isNodeName(activeElement, \"embed\") || isNodeName(target, \"embed\") && /\\.pdf/i.test(target.src)) {\n            return true;\n        }\n\n        var deltaX = event.wheelDeltaX || 0;\n        var deltaY = event.wheelDeltaY || 0;\n\n        // use wheelDelta if deltaX/Y is not available\n        if (!deltaX && !deltaY) {\n            deltaY = event.wheelDelta || 0;\n        }\n\n        // check if it's a touchpad scroll that should be ignored\n        if (!options.touchpadSupport && isTouchpad(deltaY)) {\n            return true;\n        }\n\n        // scale by step size\n        // delta is 120 most of the time\n        // synaptics seems to send 1 sometimes\n        if (Math.abs(deltaX) > 1.2) {\n            deltaX *= options.stepSize / 120;\n        }\n        if (Math.abs(deltaY) > 1.2) {\n            deltaY *= options.stepSize / 120;\n        }\n\n        scrollArray(overflowing, -deltaX, -deltaY);\n        event.preventDefault();\n    }\n\n    /**\n     * Keydown event handler.\n     * @param {Object} event\n     */\n    function keydown(event) {\n\n        var target = event.target;\n        var modifier = event.ctrlKey || event.altKey || event.metaKey || event.shiftKey && event.keyCode !== key.spacebar;\n\n        // do nothing if user is editing text\n        // or using a modifier key (except shift)\n        // or in a dropdown\n        if (/input|textarea|select|embed/i.test(target.nodeName) || target.isContentEditable || event.defaultPrevented || modifier) {\n            return true;\n        }\n        // spacebar should trigger button press\n        if (isNodeName(target, \"button\") && event.keyCode === key.spacebar) {\n            return true;\n        }\n\n        var shift,\n            x = 0,\n            y = 0;\n        var elem = overflowingAncestor(activeElement);\n        var clientHeight = elem.clientHeight;\n\n        if (elem == document.body) {\n            clientHeight = window.innerHeight;\n        }\n\n        switch (event.keyCode) {\n            case key.up:\n                y = -options.arrowScroll;\n                break;\n            case key.down:\n                y = options.arrowScroll;\n                break;\n            case key.spacebar:\n                // (+ shift)\n                shift = event.shiftKey ? 1 : -1;\n                y = -shift * clientHeight * 0.9;\n                break;\n            case key.pageup:\n                y = -clientHeight * 0.9;\n                break;\n            case key.pagedown:\n                y = clientHeight * 0.9;\n                break;\n            case key.home:\n                y = -elem.scrollTop;\n                break;\n            case key.end:\n                var damt = elem.scrollHeight - elem.scrollTop - clientHeight;\n                y = damt > 0 ? damt + 10 : 0;\n                break;\n            case key.left:\n                x = -options.arrowScroll;\n                break;\n            case key.right:\n                x = options.arrowScroll;\n                break;\n            default:\n                return true; // a key we don't care about\n        }\n\n        scrollArray(elem, x, y);\n        event.preventDefault();\n    }\n\n    /**\n     * Mousedown event only for updating activeElement\n     */\n    function mousedown(event) {\n        activeElement = event.target;\n    }\n\n    /***********************************************\n     * OVERFLOW\n     ***********************************************/\n\n    var cache = {}; // cleared out every once in while\n    setInterval(function () {\n        cache = {};\n    }, 10 * 1000);\n\n    var uniqueID = function () {\n        var i = 0;\n        return function (el) {\n            return el.uniqueID || (el.uniqueID = i++);\n        };\n    }();\n\n    function setCache(elems, overflowing) {\n        for (var i = elems.length; i--;) {\n            cache[uniqueID(elems[i])] = overflowing;\n        }return overflowing;\n    }\n\n    function overflowingAncestor(el) {\n        var elems = [];\n        var rootScrollHeight = root.scrollHeight;\n        do {\n            var cached = cache[uniqueID(el)];\n            if (cached) {\n                return setCache(elems, cached);\n            }\n            elems.push(el);\n            if (rootScrollHeight === el.scrollHeight) {\n                if (!isFrame || root.clientHeight + 10 < rootScrollHeight) {\n                    return setCache(elems, document.body); // scrolling root in WebKit\n                }\n            } else if (el.clientHeight + 10 < el.scrollHeight) {\n                overflow = getComputedStyle(el, \"\").getPropertyValue(\"overflow-y\");\n                if (overflow === \"scroll\" || overflow === \"auto\") {\n                    return setCache(elems, el);\n                }\n            }\n        } while (el = el.parentNode);\n    }\n\n    /***********************************************\n     * HELPERS\n     ***********************************************/\n\n    function addEvent(type, fn, bubble) {\n        window.addEventListener(type, fn, bubble || false);\n    }\n\n    function removeEvent(type, fn, bubble) {\n        window.removeEventListener(type, fn, bubble || false);\n    }\n\n    function isNodeName(el, tag) {\n        return (el.nodeName || \"\").toLowerCase() === tag.toLowerCase();\n    }\n\n    function directionCheck(x, y) {\n        x = x > 0 ? 1 : -1;\n        y = y > 0 ? 1 : -1;\n        if (direction.x !== x || direction.y !== y) {\n            direction.x = x;\n            direction.y = y;\n            que = [];\n            lastScroll = 0;\n        }\n    }\n\n    var deltaBufferTimer;\n\n    function isTouchpad(deltaY) {\n        if (!deltaY) return;\n        deltaY = Math.abs(deltaY);\n        deltaBuffer.push(deltaY);\n        deltaBuffer.shift();\n        clearTimeout(deltaBufferTimer);\n\n        var allEquals = deltaBuffer[0] == deltaBuffer[1] && deltaBuffer[1] == deltaBuffer[2];\n        var allDivisable = isDivisible(deltaBuffer[0], 120) && isDivisible(deltaBuffer[1], 120) && isDivisible(deltaBuffer[2], 120);\n        return !(allEquals || allDivisable);\n    }\n\n    function isDivisible(n, divisor) {\n        return Math.floor(n / divisor) == n / divisor;\n    }\n\n    var requestFrame = function () {\n        return window.requestAnimationFrame || window.webkitRequestAnimationFrame || function (callback, element, delay) {\n            window.setTimeout(callback, delay || 1000 / 60);\n        };\n    }();\n\n    /***********************************************\n     * PULSE\n     ***********************************************/\n\n    /**\n     * Viscous fluid with a pulse for part and decay for the rest.\n     * - Applies a fixed force over an interval (a damped acceleration), and\n     * - Lets the exponential bleed away the velocity over a longer interval\n     * - Michael Herf, http://stereopsis.com/stopping/\n     */\n    function pulse_(x) {\n        var val, start, expx;\n        // test\n        x = x * options.pulseScale;\n        if (x < 1) {\n            // acceleartion\n            val = x - (1 - Math.exp(-x));\n        } else {\n            // tail\n            // the previous animation ended here:\n            start = Math.exp(-1);\n            // simple viscous drag\n            x -= 1;\n            expx = 1 - Math.exp(-x);\n            val = start + expx * (1 - start);\n        }\n        return val * options.pulseNormalize;\n    }\n\n    function pulse(x) {\n        if (x >= 1) return 1;\n        if (x <= 0) return 0;\n\n        if (options.pulseNormalize == 1) {\n            options.pulseNormalize /= pulse_(1);\n        }\n        return pulse_(x);\n    }\n\n    var isChrome = /chrome/i.test(window.navigator.userAgent);\n    var isMouseWheelSupported = 'onmousewheel' in document;\n\n    if (isMouseWheelSupported && isChrome) {\n        addEvent(\"mousedown\", mousedown);\n        addEvent(\"mousewheel\", wheel);\n        addEvent(\"load\", init);\n    };\n})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///106\n");

/***/ })

/******/ });